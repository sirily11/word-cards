{"version":3,"sources":["components/plugins/react-router-transition/ensureSpring.js","components/plugins/react-router-transition/RouteTransition.js","components/plugins/react-router-transition/AnimatedRoute.js","components/plugins/react-router-transition/AnimatedSwitch.js","components/models/wordCards.ts","components/models/HomeContext.tsx","components/pages/home/TagPanel.tsx","components/pages/home/HomePage.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ensureSpring","styles","Object","keys","reduce","acc","key","value","spring","RouteTransition","willEnter","props","atEnter","willLeave","atLeave","didLeave","styleThatLeft","renderRoute","config","style","mapStyles","wrapperComponent","createElement","data","cloneElement","renderRoutes","interpolatedStyles","className","map","this","runOnMount","children","atActive","defaultStyles","getDefaultStyles","getStyles","Component","defaultProps","val","NO_MATCH","getLocationKey","location","getMatchedRoute","pathname","React","Children","toArray","find","child","matchPath","exact","path","AnimatedSwitch","state","match","matches","nextProps","nextMatch","setState","routeTransitionProps","RouteWrapper","WordCards","words","englishWords","chineseWords","db","nedb","filename","autoload","Promise","resolve","reject","err","docs","console","log","forEach","d","push","chinese","w","includes","english","userCheck","a","undefined","translate","setCORS","to","result","window","confirm","text","alert","findOne","update","_id","$addToSet","insert","$regex","RegExp","$pull","numberOfUpdate","splice","indexOf","remove","getDataFromDatabase","JSON","stringify","FileSaver","saveAs","File","type","file","callback","fileReader","FileReader","onloadend","e","content","json","parse","i","addLoc","length","readAsText","upsert","number","HomePageProvider","switchMode","newMode","isSearch","constructGraph","l","n","r","source","target","id","nodes","links","importWords","onImport","wordCard","translations","t","add_new_word","word","handleSubmit","search","node","graph","searchByEnglish","wordResult","message","handleEnglish","results","onEngChange","str","onChnChange","wordCards","HomePageContext","Provider","context","mode","createContext","useStyles","makeStyles","theme","createStyles","root","display","maxHeight","overflowY","flexWrap","margin","spacing","chip","maxWidth","height","padding","TagPanel","homeModel","useContext","classes","cw","filter","c","ew","width","columnCount","adjustedWidth","columnWidth","registerChild","overflowX","rowHeight","rowCount","cellRenderer","columnIndex","row","col","numberPerRow","list","item","Chip","label","color","onDelete","deleteByChinese","onClick","deleteByEnglish","renderComponent","rowIndex","Graph","require","myConfig","automaticRearrangeAfterDropNode","collapsible","directed","focusAnimationDuration","focusZoom","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","staticGraphWithDragAndDrop","innerWidth","d3","alphaTarget","gravity","linkLength","linkStrength","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","semanticStrokeWidth","markerHeight","markerWidth","HomePage","fileInput","createRef","fileInput2","useState","progress","setprogress","marginLeft","marginRight","Grid","Row","Radio","toggle","checked","onChange","Button","icon","saveToLocal","Icon","name","current","click","ref","files","loadLocalFile","loading","Progress","percent","precision","Message","Header","Card","Segment","placeholder","columns","relaxed","Column","marginBottom","Input","fluid","Divider","vertical","marginTop","App","component","Boolean","hostname","ReactDOM","render","catalogs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5dcc6ec.chunk.js","sourcesContent":["import spring from './spring';\n\nexport default function ensureSpring(styles) {\n  return Object.keys(styles).reduce((acc, key) => {\n    const value = styles[key];\n    acc[key] = typeof value === 'number' ? spring(value) : value;\n    return acc;\n  }, {});\n}\n","import React, { cloneElement, createElement, Component } from 'react';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport PropTypes from 'prop-types';\n\nimport ensureSpring from './ensureSpring';\n\nconst identity = val => val;\n\nclass RouteTransition extends Component {\n  static defaultProps = {\n    wrapperComponent: 'div',\n    runOnMount: false,\n    mapStyles: identity,\n  };\n\n  static propTypes = {\n    className: PropTypes.string,\n    wrapperComponent: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.element,\n      PropTypes.string,\n    ]),\n    atEnter: PropTypes.object.isRequired,\n    atActive: PropTypes.object.isRequired,\n    atLeave: PropTypes.object.isRequired,\n    didLeave: PropTypes.func,\n    mapStyles: PropTypes.func.isRequired,\n    runOnMount: PropTypes.bool.isRequired,\n  };\n\n  getDefaultStyles() {\n    if (!this.props.runOnMount) {\n      return null;\n    }\n\n    if (!this.props.children) {\n      return [];\n    }\n\n    return [\n      {\n        key: this.props.children.key,\n        data: this.props.children,\n        style: this.props.atEnter,\n      },\n    ];\n  }\n\n  // there's only ever one route mounted at a time,\n  // so just return the current match\n  getStyles() {\n    if (!this.props.children) {\n      return [];\n    }\n\n    return [\n      {\n        key: this.props.children.key,\n        data: this.props.children,\n        style: ensureSpring(this.props.atActive),\n      },\n    ];\n  }\n\n  willEnter = () => {\n    return this.props.atEnter;\n  };\n\n  willLeave = () => {\n    return ensureSpring(this.props.atLeave);\n  };\n\n  didLeave = (styleThatLeft) => {\n    if (this.props.didLeave) {\n      this.props.didLeave(styleThatLeft);\n    }\n  }\n\n  renderRoute = config => {\n    const props = {\n      style: this.props.mapStyles(config.style),\n      key: config.key,\n    };\n\n    return this.props.wrapperComponent !== false\n      ? createElement(this.props.wrapperComponent, props, config.data)\n      : cloneElement(config.data, props);\n  };\n\n  renderRoutes = interpolatedStyles => {\n    return (\n      <div className={this.props.className}>\n        {interpolatedStyles.map(this.renderRoute)}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <TransitionMotion\n        defaultStyles={this.getDefaultStyles()}\n        styles={this.getStyles()}\n        willEnter={this.willEnter}\n        willLeave={this.willLeave}\n        didLeave={this.didLeave}\n      >\n        {this.renderRoutes}\n      </TransitionMotion>\n    );\n  }\n}\n\nexport default RouteTransition;\n","import React from 'react';\nimport { Route, matchPath } from 'react-router-dom';\n\nimport RouteTransition from './RouteTransition';\n\n/**\n * Here we only care about whether or not the pathname matches. If so,\n * we'll use the route's path as the key, otherwise we'll default it\n * to a string signifying no match.\n */\nfunction getKey({ pathname }, path, exact) {\n  return matchPath(pathname, { exact, path }) ? 'match' : 'no-match';\n}\n\nconst AnimatedRoute = ({ component, path, exact, ...routeTransitionProps }) => (\n  <Route\n    render={({ location, match }) => (\n      <RouteTransition {...routeTransitionProps}>\n        <Route\n          key={getKey(location, path, exact)}\n          path={path}\n          exact={exact}\n          location={location}\n          component={component}\n        />\n      </RouteTransition>\n    )}\n  />\n);\n\nexport default AnimatedRoute;\n","import React from 'react';\nimport { Route, Switch, matchPath } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RouteTransition from './RouteTransition';\n\nconst NO_MATCH = {\n  key: 'no-match',\n};\n\n/**\n * Not every location object has a `key` property (e.g. HashHistory).\n */\nfunction getLocationKey(location) {\n  return typeof location.key === 'string' ? location.key : '';\n}\n\n/**\n * Some superfluous work, but something we need to do in order\n * to persist matches/allow for nesting/etc.\n */\nfunction getMatchedRoute(children, pathname) {\n  return React.Children.toArray(children).find(child => {\n    return matchPath(pathname, {\n      exact: child.props.exact,\n      path: child.props.path,\n    });\n  }) || NO_MATCH;\n}\n\nclass AnimatedSwitch extends React.Component {\n  static propTypes = {\n    location: PropTypes.shape({\n      key: PropTypes.string,\n      pathname: PropTypes.string,\n    }),\n  };\n\n  state = {\n    key: getLocationKey(this.props.location),\n    match: getMatchedRoute(this.props.children, this.props.location.pathname),\n  };\n\n  matches = 0;\n\n  componentWillReceiveProps(nextProps) {\n    const nextMatch = getMatchedRoute(\n      nextProps.children,\n      nextProps.location.pathname,\n    );\n\n    if (this.state.match.key !== nextMatch.key) {\n      this.setState({\n        match: nextMatch,\n        key: getLocationKey(nextProps.location) + ++this.matches,\n      });\n    }\n  }\n\n  render() {\n    const { children, location, match, ...routeTransitionProps } = this.props;\n\n    return (\n      <RouteTransition {...routeTransitionProps}>\n        <Switch key={this.state.key} location={location}>\n          {children}\n        </Switch>\n      </RouteTransition>\n    );\n  }\n}\n\n// inject location as a prop so we can listen for changes\nconst RouteWrapper = props => (\n  <Route\n    children={({ location }) => (\n      <AnimatedSwitch location={location} {...props} />\n    )}\n  />\n);\n\nexport default RouteWrapper;\n","import nedb from \"nedb\";\n// const translate = (window as any).require(\"google-translate-api\")\nimport { setCORS } from \"google-translate-api-browser\";\nimport FileSaver, { saveAs } from 'file-saver';\n\nexport interface Word {\n    words: string[];\n    chinese: string;\n}\n\nexport class WordCards {\n    words: Word[];\n    englishWords: string[];\n    chineseWords: string[];\n    db: Nedb<Word>\n\n    constructor() {\n        this.words = [];\n        this.englishWords = [];\n        this.chineseWords = []\n        this.db = new nedb({ filename: \"words.db\", autoload: true });\n    }\n\n    /**\n     * load data into memory. Call this when init\n     */\n    async getDataFromDatabase(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            // clear all\n            this.englishWords = []\n            this.chineseWords = []\n            this.db.find<Word>({}, (err, docs) => {\n                if (err) console.log(err);\n                docs.forEach(d => {\n                    this.chineseWords.push(d.chinese)\n                    d.words.forEach(w => {\n                        if (!this.englishWords.includes(w)) {\n                            this.englishWords.push(w);\n                        }\n                    });\n                });\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Add new word to database\n     * @param english English keyword\n     * @param chinese Chinese translation. If null, then use google translate to get translation\n     */\n    async add_new_word(\n        english: string,\n        chinese: string | undefined,\n        userCheck: boolean = true\n    ): Promise<{ english: string; chinese: string }> {\n        return new Promise(async (resolve, reject) => {\n            /// If no chinese has been set, use google translate\n            /// but will ask user if use the translation from google.\n            /// If not, return and throw error.\n            if (chinese === undefined || chinese === \"\") {\n                const translate = setCORS(\"https://cors-anywhere.herokuapp.com/\");\n                let result = await translate(english, { to: \"zh-CN\" });\n                if (userCheck) {\n                    let willUseGoogleTranslate = window.confirm(\n                        `Will you use translation ${(result as any).text}?`\n                    );\n                    if (willUseGoogleTranslate) {\n                        chinese = (result as any).text;\n                    } else {\n                        alert(\"No chinese for this word\");\n                        return;\n                    }\n                } else {\n                    chinese = (result as any).text;\n                }\n            }\n            if (!this.englishWords.includes(english)) this.englishWords.push(english);\n            this.db.findOne<Word>({ chinese: chinese }, (err, docs) => {\n                console.log(\"Found one\");\n                // if found one\n                if (docs) {\n                    this.db.update<Word>(\n                        { _id: (docs as any)._id },\n                        { $addToSet: { words: english } },\n                        {},\n                        () => {\n                            resolve({ english: english, chinese: chinese as string });\n                        }\n                    );\n                } else {\n                    this.db.insert<Word>(\n                        { words: [english], chinese: chinese as string },\n                        (err, docs) => {\n                            if (err) console.log(err);\n                            this.chineseWords.push(chinese as string)\n                            resolve({ english: english, chinese: chinese as string });\n                        }\n                    );\n                }\n            });\n        });\n    }\n\n    /**\n     * Search text based on keyword\n     * @param chinese Chinese search keyword\n     */\n    async search(chinese: string): Promise<Word[]> {\n        return new Promise((resolve, reject) => {\n            this.db.find<Word>({ chinese: { $regex: RegExp(chinese) } }, (err, data) => {\n                if (err) console.log(err);\n                resolve(data);\n            });\n        });\n    }\n\n    /**\n     * Search text based on english\n     * @param english Chinese search keyword\n     */\n    async searchByEnglish(english: string): Promise<Word[]> {\n        return new Promise((resolve, reject) => {\n            this.db.find<Word>({ words: english }, (err, data) => {\n                if (err) console.log(err);\n                resolve(data);\n            });\n        });\n    }\n\n    /**\n     * Delete word from database.\n     * This will only delete the english word, but keep chinese\n     * @param english English keyword\n     */\n    async deleteByEnglish(english: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this.db.update<Word>(\n                { words: english },\n                { $pull: { words: english } },\n                {},\n                (err, numberOfUpdate) => {\n                    console.log(numberOfUpdate);\n                    if (err) {\n                        console.log(err);\n                        reject(false);\n                    }\n                    if (numberOfUpdate > 0) {\n                        this.englishWords.splice(this.englishWords.indexOf(english), 1);\n                        resolve(true);\n                    } else {\n                        reject(false);\n                    }\n                }\n            );\n        });\n    }\n\n    async deleteByChinese(chinese: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this.db.remove(\n                { chinese: chinese },\n                async (err, numberOfUpdate) => {\n                    console.log(numberOfUpdate);\n                    if (err) {\n                        console.log(err);\n                        reject(false);\n                    }\n                    if (numberOfUpdate > 0) {\n                        // refetch\n                        await this.getDataFromDatabase()\n                        resolve(true);\n                    } else {\n                        reject(false);\n                    }\n                }\n            );\n        });\n    }\n\n\n    /**\n     * Save database file to local\n     * @param filename File name you want to save\n     */\n    async saveToLocal(filename: string) {\n        return new Promise((resolve, reject) => {\n            this.db.find({}, (err, docs) => {\n                let data = JSON.stringify(docs)\n                FileSaver.saveAs(new File([data], \"words.json\", { type: \"application/json;charset=utf-8\" }))\n                resolve()\n            })\n        })\n    }\n\n    /**\n     * Load local file\n     * @param file JSON data file\n     */\n    async loadLocalFile(file: File, callback: (progress: number) => void) {\n        return new Promise((resolve, reject) => {\n            let fileReader = new FileReader()\n            fileReader.onloadend = async (e) => {\n                try {\n                    let content = fileReader.result\n                    let json: Word[] = JSON.parse(content as string)\n                    let i = 0\n                    for (let w of json) {\n                        await this.addLoc(w)\n                        i += 1\n                        // await new Promise((resolve => setTimeout(resolve, 15)))\n                        callback((i / json.length) * 100)\n                    }\n                    await this.getDataFromDatabase()\n                    resolve()\n                } catch (err) {\n                    alert(err)\n                }\n\n            }\n            fileReader.readAsText(file)\n        })\n    }\n\n\n    private async addLoc(w: Word) {\n        return new Promise((resolve, reject) => {\n            this.db.update({ _id: (w as any)._id }, w, { upsert: true }, (err, number, upsert) => {\n                if (err) {\n                    console.log(err)\n                    reject()\n                }\n                resolve()\n            })\n        })\n    }\n\n\n}\n","import React, { Component } from \"react\";\nimport { WordCards, Word } from \"./wordCards\";\n\ninterface Node {\n  nodes: { id: string }[];\n  links: { source: string; target: string }[];\n}\n\ninterface HomePageContext {\n  wordCard: WordCards;\n  isSearch: boolean;\n  switchMode(isSearch: boolean): void;\n  handleSubmit(english: string, chinese: string): void;\n  handleEnglish(english: string): void;\n  update(word: WordCards): void;\n  importWords(\n    words: { word: string }[],\n    onImport: (progress: number) => void\n  ): Promise<void>;\n  english: string;\n  chinese: string;\n  onEngChange(str: string): void;\n  onChnChange(str: string): void;\n  graph?: Node;\n  message?: any;\n}\n\ninterface HomePageProps {}\n\nexport class HomePageProvider extends Component<\n  HomePageProps,\n  HomePageContext\n> {\n  constructor(props: HomePageProps) {\n    super(props);\n    this.state = {\n      wordCard: new WordCards(),\n      isSearch: false,\n      switchMode: this.switchMode,\n      handleSubmit: this.handleSubmit,\n      handleEnglish: this.handleEnglish,\n      update: this.update,\n      english: \"\",\n      chinese: \"\",\n      onChnChange: this.onChnChange,\n      onEngChange: this.onEngChange,\n      importWords: this.importWords\n    };\n  }\n\n  async componentWillMount() {\n    let wordCards = new WordCards();\n    await wordCards.getDataFromDatabase();\n    this.setState({ wordCard: wordCards });\n  }\n\n  switchMode = (newMode: boolean) => {\n    this.setState({ isSearch: newMode });\n  };\n\n  private constructGraph = (words: Word[]): Node => {\n    let l: { source: string; target: string }[] = [];\n    let n: { id: string }[] = [];\n\n    words.forEach(r => {\n      r.words.forEach(w => {\n        l.push({ source: r.chinese, target: w });\n        n.push({ id: w });\n      });\n      n.push({ id: r.chinese });\n    });\n\n    let node: Node = {\n      nodes: n,\n      links: l\n    };\n    return node;\n  };\n\n  /**\n   * Import words from file, this is not load previous database\n   */\n  importWords = async (\n    words: { word: string; translations: string[] }[],\n    onImport: (progress: number) => void\n  ): Promise<void> => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let i = 0;\n        let { wordCard, isSearch } = this.state;\n        for (let w of words) {\n          for (let t of w.translations) {\n            let result = await wordCard.add_new_word(w.word, t);\n          }\n          i = i + 1;\n          onImport((i / words.length) * 100);\n        }\n      } catch (err) {\n        alert(\"Data error\");\n        reject();\n      }\n      resolve();\n    });\n  };\n\n  handleSubmit = async (english: string, chinese: string) => {\n    let { wordCard, isSearch } = this.state;\n    if (isSearch) {\n      if (chinese !== \"\") {\n        let result = await wordCard.search(chinese);\n        // link\n        let node = this.constructGraph(result);\n        if (node.links.length === 0 || node.nodes.length === 0) {\n          alert(\"No data\");\n          return;\n        }\n        this.setState({ graph: node });\n      }\n    } else {\n      /// add word\n      if (english !== \"\") {\n        let result = await wordCard.add_new_word(english, chinese);\n        let wordResult = await wordCard.searchByEnglish(english);\n        let node = this.constructGraph(wordResult);\n        this.setState({\n          message: result,\n          wordCard,\n          graph: node,\n          english: \"\",\n          chinese: \"\"\n        });\n      }\n    }\n  };\n\n  /**\n   * When user click on the tags\n   */\n  handleEnglish = async (english: string) => {\n    let { wordCard } = this.state;\n    let results = await wordCard.searchByEnglish(english);\n    let node = this.constructGraph(results);\n    if (node.links.length === 0 || node.nodes.length === 0) {\n      alert(\"No data\");\n      return;\n    }\n    this.setState({ graph: node });\n  };\n\n  update = (word: WordCards) => {\n    this.setState({ wordCard: word });\n  };\n\n  render() {\n    return (\n      <HomePageContext.Provider value={this.state}>\n        {this.props.children}\n      </HomePageContext.Provider>\n    );\n  }\n\n  onEngChange = (str: string) => {\n    this.setState({ english: str });\n  };\n\n  onChnChange = (str: string) => {\n    this.setState({ chinese: str });\n  };\n}\n\nconst context: HomePageContext = {\n  wordCard: new WordCards(),\n  isSearch: false,\n  switchMode: (mode: boolean) => {},\n  handleSubmit: (english: string, chinese: string) => {},\n  handleEnglish: (english: string) => {},\n  update: (word: WordCards) => {},\n  onChnChange: (str: string) => {},\n  onEngChange: (str: string) => {},\n  importWords: (\n    words: { word: string }[],\n    onImport: (progress: number) => void\n  ) => {\n    return Promise.resolve();\n  },\n  english: \"\",\n  chinese: \"\"\n};\n\nexport const HomePageContext = React.createContext(context);\n","import React, { useContext } from \"react\";\nimport { HomePageContext } from \"../../models/HomeContext\";\nimport { Chip } from \"@material-ui/core\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\n// import AutoSizer from \"react-virtualized-auto-sizer\";\n// import { FixedSizeList as List, VariableSizeGrid as Grid } from \"react-window\";\nimport { ColumnSizer, Grid, AutoSizer } from \"react-virtualized\";\nimport \"react-virtualized/styles.css\"; // only needs to be imported once\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      maxHeight: 400,\n      overflowY: \"auto\",\n      flexWrap: \"wrap\",\n      \"& > *\": {\n        margin: theme.spacing(0.5)\n      }\n    },\n    chip: {\n      maxWidth: \"130px\",\n      height: \"30px\",\n      padding: 10\n    }\n  })\n);\n\nexport default function TagPanel() {\n  const homeModel = useContext(HomePageContext);\n  const classes = useStyles();\n  const {\n    isSearch,\n    handleSubmit,\n    graph,\n    message,\n    wordCard,\n    handleEnglish,\n    update,\n    english,\n    chinese\n  } = homeModel;\n\n  const colPerRow = 3;\n  let cw = wordCard.chineseWords.filter(c => c.includes(chinese));\n  let ew = wordCard.englishWords.filter(e => e.includes(english));\n\n  const renderComponent = (\n    row: number,\n    col: number,\n    numberPerRow: number,\n    style: any\n  ): React.ReactElement => {\n    let list = isSearch ? cw : ew;\n    if (row * numberPerRow + col < list.length) {\n      let item = list[row * numberPerRow + col];\n\n      if (isSearch) {\n        return (\n          <div style={style}>\n            <Chip\n              label={item}\n              key={item}\n              className={classes.chip}\n              color=\"secondary\"\n              onDelete={async () => {\n                await wordCard.deleteByChinese(item);\n                update(wordCard);\n              }}\n              onClick={async () => {\n                handleSubmit(\"\", item);\n              }}\n            ></Chip>\n          </div>\n        );\n      } else {\n        return (\n          <div style={style}>\n            <Chip\n              label={item}\n              key={item}\n              color=\"secondary\"\n              className={classes.chip}\n              onDelete={async () => {\n                await wordCard.deleteByEnglish(item);\n                update(wordCard);\n              }}\n              onClick={async () => {\n                await handleEnglish(item);\n              }}\n            ></Chip>\n          </div>\n        );\n      }\n    }\n    return <div></div>;\n  };\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => {\n        return (\n          <ColumnSizer columnCount={colPerRow} width={width}>\n            {({ adjustedWidth, columnWidth, registerChild }) => (\n              <Grid\n                style={{ overflowX: \"hidden\" }}\n                height={height}\n                columnWidth={columnWidth}\n                columnCount={colPerRow}\n                rowHeight={40}\n                rowCount={\n                  isSearch ? cw.length / colPerRow : ew.length / colPerRow\n                }\n                width={adjustedWidth}\n                cellRenderer={({ columnIndex, key, rowIndex, style }) =>\n                  renderComponent(rowIndex, columnIndex, colPerRow, style)\n                }\n              ></Grid>\n            )}\n          </ColumnSizer>\n        );\n      }}\n    </AutoSizer>\n\n    // <div className={classes.root}>\n\n    //    {isSearch\n    //   //   ? wordCard.chineseWords\n    //   //       .filter(c => c.includes(chinese))\n    //   //       .map(e => (\n    //   //         <Chip\n    //   //           label={e}\n    //   //           key={e}\n    //   //           color=\"secondary\"\n    //   //           onDelete={async () => {\n    //   //             await wordCard.deleteByChinese(e);\n    //   //             update(wordCard);\n    //   //           }}\n    //   //           onClick={async () => {\n    //   //             handleSubmit(\"\", e);\n    //   //           }}\n    //   //         ></Chip>\n    //   //       ))\n    //   //   : wordCard.englishWords\n    //   //       .filter(e => e.includes(english))\n    //   //       .map(e => (\n    //   //         <Chip\n    //   //           label={e}\n    //   //           key={e}\n    //   //           color=\"secondary\"\n    //   //           onDelete={async () => {\n    //   //             await wordCard.deleteByEnglish(e);\n    //   //             update(wordCard);\n    //   //           }}\n    //   //           onClick={async () => {\n    //   //             await handleEnglish(e);\n    //   //           }}\n    //   //         ></Chip>\n    //   //       ))}\n    // </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport {\n  Grid,\n  Divider,\n  Segment,\n  Button,\n  Radio,\n  Form,\n  Label,\n  Input,\n  Message,\n  Icon,\n  Progress\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { HomePageContext } from \"../../models/HomeContext\";\nimport TagPanel from \"./TagPanel\";\nconst { Graph } = require(\"react-d3-graph\");\n\nconst myConfig = {\n  automaticRearrangeAfterDropNode: false,\n  collapsible: false,\n  directed: false,\n  focusAnimationDuration: 0.75,\n  focusZoom: 1,\n  height: 400,\n  highlightDegree: 1,\n  highlightOpacity: 1,\n  linkHighlightBehavior: false,\n  maxZoom: 8,\n  minZoom: 0.1,\n  nodeHighlightBehavior: false,\n  panAndZoom: false,\n  staticGraph: false,\n  staticGraphWithDragAndDrop: false,\n  width: window.innerWidth - 20,\n  d3: {\n    alphaTarget: 0.05,\n    gravity: -100,\n    linkLength: 100,\n    linkStrength: 1\n  },\n  node: {\n    color: \"#d3d3d3\",\n    fontColor: \"black\",\n    fontSize: 18,\n    fontWeight: \"normal\",\n    highlightColor: \"SAME\",\n    highlightFontSize: 8,\n    highlightFontWeight: \"normal\",\n    highlightStrokeColor: \"SAME\",\n    highlightStrokeWidth: \"SAME\",\n    labelProperty: \"id\",\n    mouseCursor: \"pointer\",\n    opacity: 1,\n    renderLabel: true,\n    size: 200,\n    strokeColor: \"none\",\n    strokeWidth: 1.5,\n    svg: \"\",\n    symbolType: \"circle\"\n  },\n  link: {\n    color: \"#d3d3d3\",\n    fontColor: \"black\",\n    fontSize: 8,\n    fontWeight: \"normal\",\n    highlightColor: \"#d3d3d3\",\n    highlightFontSize: 8,\n    highlightFontWeight: \"normal\",\n    labelProperty: \"label\",\n    mouseCursor: \"pointer\",\n    opacity: 1,\n    renderLabel: false,\n    semanticStrokeWidth: false,\n    strokeWidth: 1.5,\n    markerHeight: 6,\n    markerWidth: 6\n  }\n};\n\nexport function HomePage() {\n  const homeModel = useContext(HomePageContext);\n  const {\n    isSearch,\n    handleSubmit,\n    graph,\n    message,\n    wordCard,\n    update,\n    english,\n    chinese,\n    onChnChange,\n    onEngChange,\n    importWords\n  } = homeModel;\n  let fileInput = React.createRef<HTMLInputElement>();\n  /// to import words\n  let fileInput2 = React.createRef<HTMLInputElement>();\n\n  const [progress, setprogress] = useState<number | undefined>();\n\n  return (\n    <div style={{ marginLeft: 20, marginRight: 20 }} id=\"home\">\n      <h1>Word card</h1>\n      <Grid.Row style={{ margin: 10 }}>\n        <Radio\n          style={{ margin: 10 }}\n          toggle\n          label={isSearch ? \"Search mode\" : \"Add\"}\n          checked={homeModel.isSearch}\n          onChange={(e, { checked }) => {\n            homeModel.switchMode(checked as boolean);\n          }}\n        />\n\n        <Button\n          icon\n          onClick={async () => {\n            await wordCard.saveToLocal(\"Data.db\");\n          }}\n        >\n          <Icon name=\"download\"></Icon>\n        </Button>\n\n        <Button\n          icon\n          onClick={() => {\n            fileInput.current && fileInput.current.click();\n          }}\n        >\n          <input\n            ref={fileInput}\n            type=\"file\"\n            style={{ display: \"none\" }}\n            onChange={async e => {\n              let file = e.target.files && e.target.files[0];\n              if (file) {\n                await wordCard.loadLocalFile(file, number =>\n                  setprogress(number)\n                );\n                setprogress(undefined);\n                update(wordCard);\n              }\n            }}\n          />\n          <Icon name=\"folder open\"></Icon>\n        </Button>\n        <Button\n          icon\n          loading={progress !== undefined}\n          onClick={() => {\n            fileInput2.current && fileInput2.current.click();\n          }}\n        >\n          <input\n            ref={fileInput2}\n            type=\"file\"\n            style={{ display: \"none\" }}\n            onChange={async e => {\n              let file = e.target.files && e.target.files[0];\n              let fileReader = new FileReader();\n              fileReader.onloadend = async e => {\n                let content = fileReader.result;\n                let data: any[] = JSON.parse(content as string);\n\n                await importWords(data, progress => {\n                  setprogress(progress);\n                });\n                update(wordCard);\n                setprogress(undefined);\n              };\n              fileReader.readAsText(file as File);\n            }}\n          />\n          <Icon name=\"upload\"></Icon>\n        </Button>\n        {progress && (\n          <Progress percent={progress} progress precision={2}></Progress>\n        )}\n      </Grid.Row>\n\n      {message && (\n        <Message>\n          <Message.Header>Add new word</Message.Header>\n          <p>\n            English: {message.english} and translation {message.chinese}\n          </p>\n        </Message>\n      )}\n      <Card style={{ marginLeft: 10, marginRight: 10 }}>\n        <Segment placeholder>\n          <Grid columns={2} relaxed=\"very\">\n            <Grid.Column>\n              {!isSearch && (\n                <Grid.Row style={{ marginBottom: 10 }}>\n                  <Input\n                    label=\"English\"\n                    fluid\n                    value={english}\n                    onChange={(e, { value }) => {\n                      onEngChange(value);\n                    }}\n                  ></Input>\n                </Grid.Row>\n              )}\n              <Grid.Row>\n                <Input\n                  label=\"Chinese\"\n                  fluid\n                  value={chinese}\n                  onChange={(e, { value }) => {\n                    onChnChange(value);\n                  }}\n                ></Input>\n              </Grid.Row>\n            </Grid.Column>\n            <Grid.Column style={{ height: 400 }}>\n              <TagPanel></TagPanel>\n            </Grid.Column>\n          </Grid>\n          <Divider vertical>Or</Divider>\n        </Segment>\n      </Card>\n      <Button\n        style={{ marginLeft: 10, marginTop: 10 }}\n        onClick={async () => {\n          handleSubmit(english, chinese);\n        }}\n      >\n        {isSearch ? \"Search\" : \"Add\"}\n      </Button>\n      {graph && <Graph id=\"graph-id\" data={graph} config={myConfig}></Graph>}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport {\n  spring,\n  AnimatedRoute,\n  AnimatedSwitch\n} from \"./components/plugins/react-router-transition\";\nimport { HomePage } from \"./components/pages/home/HomePage\";\nimport { HomePageProvider } from \"./components/models/HomeContext\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HomePageProvider>\n        <Router>\n          <AnimatedSwitch\n            atEnter={{ opacity: 0 }}\n            atLeave={{ opacity: 0 }}\n            atActive={{ opacity: 1 }}\n            className=\"switch-wrapper\"\n          >\n            <Route exact path=\"/\" component={HomePage} />\n          </AnimatedSwitch>\n        </Router>\n      </HomePageProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nProvider } from \"@lingui/react\";\n\nReactDOM.render(\n  <I18nProvider catalogs={{}}>\n    <App />\n  </I18nProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}